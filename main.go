package main

import (
	"RSA/utils"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"encoding/hex"
	"encoding/pem"
	"fmt"
	"log"
)

func main() {

	// openssl x509 -in pub.cer -pubkey > pub.pem
	// prienctypt := `4dd224dd1634be9679859813adbead9e8e21a6f4b4ea943907e6848636dcadaa8ed32e3599a0ff1a800cc506f16efacb16d3e80a005659d6cf764160185a472851263da2952bef5e032af014f122db7d007953c35b7defb55e6ed16dd1194311685299602aaff42ce5f8665d1742dd88f3fd22267a1c752718d0dbc214883c997495324b991605e0fb7d765edd96f2048a4fcf47bd8273c58d0d31fdb3ae5baac837dd6ebbed6f76b70eaec9205d9f2d12f911ae81b4c1fe62f1c068395da0a4be07f68dccf43d1473d21912d75a622e9682e9f3c6a6b6c1c8a05df0b1301747134656cadb7f3c67fdbec022c21fe93ae400b44eaf7f9eb3725465969727cc5d4a901670bbeb48951564834c0a7e0fb5ee6faa44db11004a4cb8194f1a462cdee12274b1639611fa825372ecf654511a4da24f36efc001dcfa8f08097c20b7981ed1a1b8720d6abef14ee1ac92c986febcd7a3b83d4a56d39f126cdc1216fe735f764b6b6b5264f11577e096bd363d5dbe23ab3f67779ed7efd1d750108708e40c1426aaede46b481d2528b56c659ab8f3bcc1c39d700e82e48698ceb77dc0dd5bdaf405602fe08ae89fdc366651895c24ee84336c3a0c61635f9874d94978cb6fac81e7ada192ba1fa72385e9d4bffa8ca5691ebdd3f2a11e33d1bfaf7e49a17cafe0744dff2fa18c7c8f022553148e668c34a21495192e98d85042ba1b90bd`
	prienctypt, _ := hex.DecodeString(`4dd224dd1634be9679859813adbead9e8e21a6f4b4ea943907e6848636dcadaa8ed32e3599a0ff1a800cc506f16efacb16d3e80a005659d6cf764160185a472851263da2952bef5e032af014f122db7d007953c35b7defb55e6ed16dd1194311685299602aaff42ce5f8665d1742dd88f3fd22267a1c752718d0dbc214883c997495324b991605e0fb7d765edd96f2048a4fcf47bd8273c58d0d31fdb3ae5baac837dd6ebbed6f76b70eaec9205d9f2d12f911ae81b4c1fe62f1c068395da0a4be07f68dccf43d1473d21912d75a622e9682e9f3c6a6b6c1c8a05df0b1301747134656cadb7f3c67fdbec022c21fe93ae400b44eaf7f9eb3725465969727cc5d4a901670bbeb48951564834c0a7e0fb5ee6faa44db11004a4cb8194f1a462cdee12274b1639611fa825372ecf654511a4da24f36efc001dcfa8f08097c20b7981ed1a1b8720d6abef14ee1ac92c986febcd7a3b83d4a56d39f126cdc1216fe735f764b6b6b5264f11577e096bd363d5dbe23ab3f67779ed7efd1d750108708e40c1426aaede46b481d2528b56c659ab8f3bcc1c39d700e82e48698ceb77dc0dd5bdaf405602fe08ae89fdc366651895c24ee84336c3a0c61635f9874d94978cb6fac81e7ada192ba1fa72385e9d4bffa8ca5691ebdd3f2a11e33d1bfaf7e49a17cafe0744dff2fa18c7c8f022553148e668c34a21495192e98d85042ba1b90bd`)
	// prienctypt := []byte(`4dd224dd1634be9679859813adbead9e8e21a6f4b4ea943907e6848636dcadaa8ed32e3599a0ff1a800cc506f16efacb16d3e80a005659d6cf764160185a472851263da2952bef5e032af014f122db7d007953c35b7defb55e6ed16dd1194311685299602aaff42ce5f8665d1742dd88f3fd22267a1c752718d0dbc214883c997495324b991605e0fb7d765edd96f2048a4fcf47bd8273c58d0d31fdb3ae5baac837dd6ebbed6f76b70eaec9205d9f2d12f911ae81b4c1fe62f1c068395da0a4be07f68dccf43d1473d21912d75a622e9682e9f3c6a6b6c1c8a05df0b1301747134656cadb7f3c67fdbec022c21fe93ae400b44eaf7f9eb3725465969727cc5d4a901670bbeb48951564834c0a7e0fb5ee6faa44db11004a4cb8194f1a462cdee12274b1639611fa825372ecf654511a4da24f36efc001dcfa8f08097c20b7981ed1a1b8720d6abef14ee1ac92c986febcd7a3b83d4a56d39f126cdc1216fe735f764b6b6b5264f11577e096bd363d5dbe23ab3f67779ed7efd1d750108708e40c1426aaede46b481d2528b56c659ab8f3bcc1c39d700e82e48698ceb77dc0dd5bdaf405602fe08ae89fdc366651895c24ee84336c3a0c61635f9874d94978cb6fac81e7ada192ba1fa72385e9d4bffa8ca5691ebdd3f2a11e33d1bfaf7e49a17cafe0744dff2fa18c7c8f022553148e668c34a21495192e98d85042ba1b90bd`)

	// fmt.Println(prienctypt)

	Pubkey := `-----BEGIN CERTIFICATE-----
MIICAjCCAWugAwIBAgIGAWc4/cNoMA0GCSqGSIb3DQEBDQUAMCExEjAQBgNVBAoMCUNGQ0EgT0NB
MTELMAkGA1UEBhMCQ04wHhcNMTgxMTIyMDExNjUzWhcNMjIxMjAxMDExNjUzWjBoMREwDwYDVQQD
DAhrY2JlYmFuazEXMBUGA1UECwwOa2NiZWJhbmstcnV5YW4xGTAXBgNVBAsMEE9yZ2FuaXphdGlv
bmFsLTExEjAQBgNVBAoMCUNGQ0EgT0NBMTELMAkGA1UEBhMCQ04wgZ8wDQYJKoZIhvcNAQEBBQAD
gY0AMIGJAoGBALj8ea7AomWj+EnqnXBt6JoJRYpn7yMPyXDhMbGUzNRpWctkKU2wBSU/9YdJbK1m
RF987oPaRUYK9r13r265TF+D1nTF7JOkopAuq05DTl1050922ZSRT7AEKDc6R0y+k6I8LLGKlFUO
+XS/1xb7XV5O0t5Rw2/tgwfAnS1r4NFpAgMBAAEwDQYJKoZIhvcNAQENBQADgYEAGwv82GmDCpo3
Ia1PaZ0LiENX2RMCk64JR1W9aaEWS0PjJ7jpIn1lBO3qEzS6Dd/lGQUxQrCeUEE1bXJUSNVufYC9
L5Ikmu1KayZPWhbnWlfUprtPzkxpqyNf2kLfTvrD+56KmHtzACGrt45uGYW0Kn1GR0DSs93qO4sI
2SUezZg=
-----END CERTIFICATE-----`

	block, _ := pem.Decode([]byte(Pubkey))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		log.Fatalf("parse certifacte key failed, err=%s", err)
	}
	pub := cert.PublicKey.(*rsa.PublicKey)

	data := ""
	for i := 0; i < len(prienctypt); i += 128 {
		testDecData, _ := utils.PublicDecrypt(pub, prienctypt[i:i+128])
		data += string(testDecData)
	}

	b4, _ := base64.StdEncoding.DecodeString(data)
	fmt.Println(string(b4))
}
